environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    # use the IP instead of "localhost" to avoid problems with "localhost" pointing to ::1.
    SQL_SERVER: 127.0.0.1
    SQL_PASS: f1frj5UA7OQx6BRyhBiE

  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.9"
      PYTHON_ARCH: "32"
      TOXENV: py27

    - PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4.3"
      PYTHON_ARCH: "32"
      TOXENV: py34
branches:
  only:
    # our appveyor branch will track the latest SQLALchemy release
    - appveyor

# Fetch repository as zip archive to speed up builds (due to SA's large history).
shallow_clone:
  true  

install:
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # install dependencies
  - "%CMD_IN_ENV% pip install wheel pytest mock tox pymssql"
  
# Not a C# project, so we don't use build
build:
  false

before_test:
  # setup and start the db server
  - ps: appveyor\mssql-server-setup.ps1
  # have to change the password b/c the default password has a "!" in it and that gets swallowed
  # somehow in the call to Tox.
  - sqlcmd -S %SQL_SERVER% -E -Q "alter login sa with password = '%SQL_PASS%', check_policy = OFF"
  # prep the SQL Server DB
  - sqlcmd -S %SQL_SERVER% -E -Q "create database satest"
  - sqlcmd -S %SQL_SERVER% -E -Q "use satest; create schema test_schema"
  - sqlcmd -S %SQL_SERVER% -E -Q "alter database satest set allow_snapshot_isolation on"
  - sqlcmd -S %SQL_SERVER% -E -Q "alter database satest set read_committed_snapshot on"

test_script:
  - "%CMD_IN_ENV% tox -- --dburi=sqlite:/// --dburi=mssql+pymssql://sa:%SQL_PASS%@%SQL_SERVER%/satest"

on_finish:
  # Always build the wheel since even with failing tests, we can assume if SA has released the
  # wheel should be available.
  - "%CMD_IN_ENV% python setup.py bdist_wheel"
  - ps: "ls dist"
  - ps: Get-ChildItem dist\*.whl | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }